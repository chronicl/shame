error[E0277]: Access mode `ReadWrite` requires the buffer content to be wrapped in `Ref`. Change `Buffer<T, ...>` to `Buffer<shame::Ref<T>, ...>`.
 --> tests/buffer_constraints_fail/write_requires_ref.rs:1:20
  |
1 | fn main() { let _: shame::Buffer<shame::f32x1, shame::mem::Storage, shame::ReadWrite> = todo!(); }
  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `shame::frontend::encoding::buffer::WriteRequiresRef` is not implemented for `(shame::ReadWrite, shame::vec<f32, x1>)`
  |
  = help: the following other types implement trait `shame::frontend::encoding::buffer::WriteRequiresRef`:
            (shame::Read, T)
            (shame::Read, shame::Ref<T, AS, AM>)
            (shame::ReadWrite, shame::Ref<T, AS, AM>)
note: required by a bound in `shame::Buffer`
 --> src/frontend/encoding/buffer.rs
  |
  | pub struct Buffer<Content, AS = mem::Storage, AM = Read, const DYNAMIC_OFFSET: bool = false>
  |            ------ required by a bound in this struct
...
  |     (AM, Content): WriteRequiresRef,
  |                    ^^^^^^^^^^^^^^^^ required by this bound in `Buffer`
